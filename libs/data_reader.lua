Data_Reader = {}

Data_Reader.boolToNumber = function(boolean)
    if boolean == true then
        return "1"
    else
        return "0"
    end
end

Data_Reader.read = function (file_name, file_name_2)
    Data_Reader.readLand(file_name)
    Data_Reader.readStats(file_name_2)
end

Data_Reader.readLand = function (file_name)
    file = io.open(file_name, "r")
    
    io.input(file)
    local text = io.read("*a")
    -- print(text)
    if text == "" then
    else
        local list = {}
        local index = 1
        for token in string.gmatch(text, "[^,]+") do
            if token == "" then
            else
                list[index] = {}
                list[index].text = token
                list[index].values = {}
                index = index + 1
            end
        end
        tokenIndex = 1
        for i = 1,index - 1, 1 do
            local currentIndex = 1
            for tok in string.gmatch(list[i].text, "[^:]+") do
                list[i].values[currentIndex] = tok
                -- print(tok)
                currentIndex = currentIndex + 1
            end
        end
        for i = 1,index - 1, 1 do
            local x = 0; local y = 0; local built = 0
            for j = 1, 3, 1 do
                if j == 1 then
                    x = tonumber(list[i].values[j])
                elseif j == 2 then
                    y = tonumber(list[i].values[j])
                elseif j == 3 then
                    built = list[i].values[j]
                end
            end
            grid[x][y].built = Data_Reader.numberToBoolean(built)
            print(grid[x][y].built)
        end
        
        Data_Reader.close(file)

    end
    
end

Data_Reader.readStats = function (file_name)
    file = io.open(file_name, "r")
    
    io.input(file)
    local text = io.read("*a")

    if text == "" then
        
    else
        local list = {}
        local index = 1
        for token in string.gmatch(text, "[^;]+") do
            if token == "" then
            else
                list[index] = {}
                list[index].text = token
                list[index].values = {}
                index = index + 1
            end
        end
    
        Player.food = tonumber(list[1].text) 
        Player.fps = tonumber(list[2].text)
        Player.hps = tonumber(list[3].text)
        Player.hasCamped = Data_Reader.numberToBoolean(list[4].text)
        Player.capitalX = tonumber(list[5].text)
        Player.capitalY = tonumber(list[6].text)
        Player.rsps = tonumber(list[7].text)
        Player.quality = tonumber(list[8].text)
        Player.qualityBoost = tonumber(list[9].text)
        Player.lb = tonumber(list[10].text)
        Player.humans = tonumber(list[11].text)
        Player.money = tonumber(list[12].text)
        Game.time = tonumber(list[13].text)
        Game.showShop = Data_Reader.numberToBoolean(list[14].text)
        print(Player.hasCamped)
    end
    -- print(text)
    
end

Data_Reader.numberToBoolean = function (n)
    if n == "0" then return false elseif n == "1" then return true end
end

Data_Reader.close = function (file)
   io.close(file) 
end

Data_Reader.writeStats = function (file_name)
   file = io.open(file_name, "w+")
   local food = Player.food
   local fps = Player.fps
   local hps = Player.hps
   local hasCamped = Data_Reader.boolToNumber(Player.hasCamped)
   local capitalX = Player.capitalX
   local capitalY = Player.capitalY
   local rps = Player.rsps
   local r = Player.quality
   local rb = Player.qualityBoost
   local lb = Player.lb
   local h = Player.humans
   local m = Player.money
   local t = Game.time
   local ss = Data_Reader.boolToNumber(Game.showShop)

   textToConfig = ""

   textToConfig = food..";"..fps..";"..hps..";"..hasCamped..";"..capitalX..";"..capitalY..";"..rps..";"..r..";"..rb..";"..lb..";"..h..";"..m..";"..t..";"..ss

   io.output(file)
   io.write(textToConfig)

   Data_Reader.close(file)
end

Data_Reader.writeLand = function (file_name)
    file = io.open(file_name, "w+")
    local saveGrid = {}
    for x = 1, divisions, 1 do
        saveGrid[x] = {}
        for y = 1, divisions, 1 do
            saveGrid[x][y] = {}
        end
    end
    
    local textToConfig = ""
    
    for _x = 1, divisions, 1 do
        for _y = 1, divisions, 1 do
            textToConfig = string.appendString(textToConfig,_x)
            textToConfig = string.appendString(textToConfig,":")
            textToConfig = string.appendString(textToConfig,_y)
            textToConfig = string.appendString(textToConfig,":")
            textToConfig = string.appendString(textToConfig,Data_Reader.boolToNumber(grid[_x][_y].built))
            textToConfig = string.appendString(textToConfig, ",")
        end
    end
    print(textToConfig)
    io.output(file)
    io.write(textToConfig)
    Data_Reader.close(file)
end

Data_Reader.write = function (file_name, file_name_2)
    Data_Reader.writeLand(file_name)
    Data_Reader.writeStats(file_name_2)
end